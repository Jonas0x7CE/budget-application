@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using BudgetApplication.Components.Account
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using BudgetApplication.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>

<div class="flex justify-center items-center sm:min-h-screen overflow-auto mt-6 sm:mt-0">
    <div class="w-80 bg-zinc-800 inset-ring inset-ring-gray-700/50 rounded-lg shadow-lg p-6 flex flex-col gap-4 justify-center items-center text-white">
        <h1 class="font-semibold text-2xl">Log in</h1>
        
        <div class="w-full">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="rounded-lg px-3 py-2 bg-red-500/50 inset-ring inset-ring-red-500 mb-2">
                    <StatusMessage Message="@errorMessage"/>
                </div>    
            }
            
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator/>
                <h2 class="text-lg font-medium mb-2">Use a local account to log in</h2>
                <hr class="border-zinc-600 mb-4"/>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Email</label>
                    <InputText @bind-Value="Input.Email"
                               placeholder="name@example.com"
                               autocomplete="username"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.Email" class="text-xs text-red-500 mt-2"/>
                </div>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Password</label>
                    <InputText @bind-Value="Input.Password"
                               placeholder="••••••••"
                               type="password"
                               autocomplete="current-password"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.Password" class="text-xs text-red-500 mt-2"/>
                </div>

                <div class="mb-4">
                    <label class="flex items-center text-sm font-medium text-white">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="mr-2 rounded border-zinc-600 bg-zinc-700 text-blue-600 focus:ring-blue-500 focus:ring-2"/>
                        Remember me
                    </label>
                </div>

                <button type="submit" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition-colors mt-2">
                    Log in
                </button>

                <div class="mt-4 space-y-2">
                    <p class="text-sm text-center">
                        <a href="Account/ForgotPassword" class="text-blue-400 hover:text-blue-300 hover:underline">Forgot your password?</a>
                    </p>
                    <p class="text-sm text-center">
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-blue-400 hover:text-blue-300 hover:underline">Register as a new user</a>
                    </p>
                    <p class="text-sm text-center">
                        <a href="Account/ResendEmailConfirmation" class="text-blue-400 hover:text-blue-300 hover:underline">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>
        </div>
        <div class="w-full mt-2">
            <section>
                <h3 class="text-lg font-medium mb-2">Use another service to log in</h3>
                <hr class="border-zinc-600 mb-4"/>
                <ExternalLoginPicker/>
            </section>
        </div>
    </div>
</div>

@code {
    private string? errorMessage;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")] public bool RememberMe { get; set; }
    }

}