@page "/Account/LoginWith2fa"

@using System.ComponentModel.DataAnnotations
@using BudgetApplication.Components.Account
@using Microsoft.AspNetCore.Identity
@using BudgetApplication.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject IdentityRedirectManager RedirectManager
@inject ILogger<LoginWith2fa> Logger
@inject NavigationManager NavigationManager

<PageTitle>Two-factor authentication</PageTitle>

<div class="flex justify-center items-center sm:min-h-screen overflow-auto mt-6 sm:mt-0">
    <div class="w-80 bg-zinc-800 inset-ring inset-ring-gray-700/50 rounded-lg shadow-lg p-6 flex flex-col gap-4 justify-center items-center text-white">
        <h1 class="font-semibold text-2xl">Two-factor authentication</h1>
        
        <div class="w-full">
            @if (!string.IsNullOrEmpty(message))
            {
                <div class="rounded-lg px-3 py-2 bg-red-500/50 inset-ring inset-ring-red-500 mb-2">
                    <StatusMessage Message="@message"/>
                </div>    
            }
            
            <h2 class="text-lg font-medium mb-2">Enter your authenticator code</h2>
            <hr class="border-zinc-600 mb-4"/>
            
            <p class="text-sm text-zinc-300 mb-4">
                Your login is protected with an authenticator app. Enter your authenticator code below.
            </p>
            
            <EditForm Model="Input" FormName="login-with-2fa" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                
                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Authenticator code</label>
                    <InputText @bind-Value="Input.TwoFactorCode" 
                               placeholder="000000"
                               autocomplete="off"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.TwoFactorCode" class="text-xs text-red-500 mt-2"/>
                </div>

                <div class="mb-4">
                    <label class="flex items-center text-sm font-medium text-white">
                        <InputCheckbox @bind-Value="Input.RememberMachine" class="mr-2 rounded border-zinc-600 bg-zinc-700 text-blue-600 focus:ring-blue-500 focus:ring-2"/>
                        Remember this machine
                    </label>
                </div>

                <button type="submit" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition-colors mt-2">
                    Log in
                </button>

                <div class="mt-4 text-center">
                    <p class="text-sm">
                        Don't have access to your authenticator device? You can 
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/LoginWithRecoveryCode", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="text-blue-400 hover:text-blue-300 hover:underline">log in with a recovery code</a>.
                    </p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery] private bool RememberMe { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Ensure the user has gone through the username & password screen first
        user = await SignInManager.GetTwoFactorAuthenticationUserAsync() ??
               throw new InvalidOperationException("Unable to load two-factor authentication user.");
    }

    private async Task OnValidSubmitAsync()
    {
        var authenticatorCode = Input.TwoFactorCode!.Replace(" ", string.Empty).Replace("-", string.Empty);
        var result = await SignInManager.TwoFactorAuthenticatorSignInAsync(authenticatorCode, RememberMe, Input.RememberMachine);
        var userId = await UserManager.GetUserIdAsync(user);

        if (result.Succeeded)
        {
            Logger.LogInformation("User with ID '{UserId}' logged in with 2fa.", userId);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User with ID '{UserId}' account locked out.", userId);
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            Logger.LogWarning("Invalid authenticator code entered for user with ID '{UserId}'.", userId);
            message = "Error: Invalid authenticator code.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Authenticator code")]
        public string? TwoFactorCode { get; set; }

        [Display(Name = "Remember this machine")]
        public bool RememberMachine { get; set; }
    }

}