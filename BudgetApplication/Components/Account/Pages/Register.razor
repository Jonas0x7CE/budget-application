@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using BudgetApplication.Components.Account
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using BudgetApplication.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>
<div class="flex justify-center items-center sm:min-h-screen overflow-auto mt-6 sm:mt-0">
    
    <div class="w-80 bg-zinc-800 inset-ring inset-ring-gray-700/50 rounded-lg shadow-lg p-6 flex flex-col gap-4 justify-center items-center text-white">
        <h1 class="font-semibold text-2xl">Register</h1>
        
        <div class="w-full">
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="rounded-lg px-3 py-2 bg-red-500/50 inset-ring inset-ring-red-500 mb-2">
                    <StatusMessage Message="@Message"/>
                </div>    
            }
            
            <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator/>
                <h2 class="text-lg font-medium mb-2">Create a new account</h2>
                <hr class="border-zinc-600 mb-4"/>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Email</label>
                    <InputText @bind-Value="Input.Email"
                               placeholder="name@example.com"
                               autocomplete="username"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.Email" class="text-xs text-red-500 mt-2"/>
                </div>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Password</label>
                    <InputText @bind-Value="Input.Password"
                               placeholder="••••••••"
                               type="password"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.Password" class="text-xs text-red-500 mt-2"/>
                </div>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Confirm Password</label>
                    <InputText @bind-Value="Input.ConfirmPassword"
                               placeholder="••••••••"
                               type="password"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-xs text-red-500 mt-2"/>
                </div>

                <button type="submit" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition-colors mt-2">
                    Register
                </button>
            </EditForm>
        </div>
        <div class="w-full mt-2">
            <section>
                <h3 class="text-lg font-medium mb-2">Use another service to register</h3>
                <hr class="border-zinc-600 mb-4"/>
                <ExternalLoginPicker/>
            </section>
        </div>
    </div>
    
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}