@page "/Account/ResetPassword"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Budget_Application.Data

@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Reset password</PageTitle>

<div class="flex justify-center items-center sm:min-h-screen overflow-auto mt-6 sm:mt-0">
    <div class="w-80 bg-zinc-800 inset-ring inset-ring-gray-700/50 rounded-lg shadow-lg p-6 flex flex-col gap-4 justify-center items-center text-white">
        <h1 class="font-semibold text-2xl">Reset password</h1>
        
        <div class="w-full">
            @if (!string.IsNullOrEmpty(Message))
            {
                <div class="rounded-lg px-3 py-2 bg-red-500/50 inset-ring inset-ring-red-500 mb-2">
                    <StatusMessage Message="@Message"/>
                </div>    
            }
            
            <EditForm Model="Input" FormName="reset-password" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                <h2 class="text-lg font-medium mb-2">Reset your password</h2>
                <hr class="border-zinc-600 mb-4"/>

                <input type="hidden" name="Input.Code" value="@Input.Code"/>
                
                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Email</label>
                    <InputText @bind-Value="Input.Email" 
                               placeholder="name@example.com" 
                               autocomplete="username" 
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.Email" class="text-xs text-red-500 mt-2"/>
                </div>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Password</label>
                    <InputText @bind-Value="Input.Password"
                               placeholder="••••••••"
                               type="password"
                               autocomplete="new-password"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.Password" class="text-xs text-red-500 mt-2"/>
                </div>

                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Confirm password</label>
                    <InputText @bind-Value="Input.ConfirmPassword"
                               placeholder="••••••••"
                               type="password"
                               autocomplete="new-password"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-xs text-red-500 mt-2"/>
                </div>

                <button type="submit" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition-colors mt-2">
                    Reset
                </button>

                <div class="mt-4 text-center">
                    <p class="text-sm">
                        <a href="Account/Login" class="text-blue-400 hover:text-blue-300 hover:underline">Back to login</a>
                    </p>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? Code { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    protected override void OnInitialized()
    {
        if (Code is null)
        {
            RedirectManager.RedirectTo("Account/InvalidPasswordReset");
        }

        Input.Code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            // Don't reveal that the user does not exist
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        var result = await UserManager.ResetPasswordAsync(user, Input.Code, Input.Password);
        if (result.Succeeded)
        {
            RedirectManager.RedirectTo("Account/ResetPasswordConfirmation");
        }

        identityErrors = result.Errors;
    }

    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required] public string Code { get; set; } = "";
    }

}