@page "/Account/Manage/EnableAuthenticator"

@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using System.Text
@using System.Text.Encodings.Web
@using BudgetApplication.Components.Account
@using Microsoft.AspNetCore.Identity
@using BudgetApplication.Data

@inject UserManager<ApplicationUser> UserManager
@inject IdentityUserAccessor UserAccessor
@inject UrlEncoder UrlEncoder
@inject IdentityRedirectManager RedirectManager
@inject ILogger<EnableAuthenticator> Logger

<PageTitle>Configure authenticator app</PageTitle>

<div class="text-white">
    <h1 class="font-semibold text-xl mb-4">Configure authenticator app</h1>
    
    <StatusMessage Message="@message"/>
    
    <div class="space-y-6">
        <div class="bg-zinc-800 rounded-lg p-4 border border-zinc-600">
            <h2 class="text-lg font-medium mb-3">Step 1: Download an authenticator app</h2>
            <p class="text-sm text-zinc-300 mb-4">
                To use an authenticator app, go to your app store and download one of the following:
            </p>
            <ul class="text-sm text-zinc-300 space-y-1 list-disc list-inside">
                <li>Microsoft Authenticator</li>
                <li>Google Authenticator</li>
                <li>Authy</li>
                <li>1Password</li>
            </ul>
        </div>

        <div class="bg-zinc-800 rounded-lg p-4 border border-zinc-600">
            <h2 class="text-lg font-medium mb-3">Step 2: Scan the QR Code</h2>
            <p class="text-sm text-zinc-300 mb-4">
                Scan this QR code with your authenticator app:
            </p>
            <div class="bg-white p-4 rounded-lg inline-block mb-4">
                <div id="qrCode" class="qr-code-container">
                    <!-- QR code will be generated here -->
                </div>
            </div>
            <div class="text-sm text-zinc-300">
                <p class="mb-2">Can't scan the QR code? Enter this key manually:</p>
                <code class="bg-zinc-700 px-2 py-1 rounded text-xs break-all">@sharedKey</code>
            </div>
        </div>

        <div class="bg-zinc-800 rounded-lg p-4 border border-zinc-600">
            <h2 class="text-lg font-medium mb-3">Step 3: Enter verification code</h2>
            <p class="text-sm text-zinc-300 mb-4">
                Once you have scanned the QR code or entered the key above, your two factor authentication app will provide you
                with a unique code. Enter the code in the confirmation box below.
            </p>
            
            <EditForm Model="Input" FormName="send-code" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                
                <div class="mb-4">
                    <label class="block mb-2 text-sm font-medium text-white">Verification Code</label>
                    <InputText @bind-Value="Input.Code" 
                               placeholder="Enter 6-digit code"
                               autocomplete="off"
                               class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                    <ValidationMessage For="() => Input.Code" class="text-xs text-red-500 mt-2"/>
                </div>

                <button type="submit" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition-colors">
                    Verify
                </button>
            </EditForm>
        </div>
    </div>
</div>

<script src="~/lib/qrcode/qrcode.min.js"></script>
<script>
    window.displayQrCode = (text) => {
        new QRCode(document.getElementById("qrCode"), text);
    };
</script>

@code {
    private const string AuthenticatorUriFormat = "otpauth://totp/{0}:{1}?secret={2}&issuer={0}&digits=6";

    private string? message;
    private ApplicationUser user = default!;
    private string? sharedKey;
    private string? authenticatorUri;
    private IEnumerable<string>? recoveryCodes;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);

        await LoadSharedKeyAndQrCodeUriAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        // Strip spaces and hyphens
        var verificationCode = Input.Code.Replace(" ", string.Empty).Replace("-", string.Empty);

        var is2faTokenValid = await UserManager.VerifyTwoFactorTokenAsync(
            user, UserManager.Options.Tokens.AuthenticatorTokenProvider, verificationCode);

        if (!is2faTokenValid)
        {
            message = "Error: Verification code is invalid.";
            return;
        }

        await UserManager.SetTwoFactorEnabledAsync(user, true);
        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' has enabled 2FA with an authenticator app.", userId);

        message = "Your authenticator app has been verified.";

        if (await UserManager.CountRecoveryCodesAsync(user) == 0)
        {
            recoveryCodes = await UserManager.GenerateNewTwoFactorRecoveryCodesAsync(user, 10);
        }
        else
        {
            RedirectManager.RedirectToWithStatus("Account/Manage/TwoFactorAuthentication", message, HttpContext);
        }
    }

    private async ValueTask LoadSharedKeyAndQrCodeUriAsync(ApplicationUser user)
    {
        // Load the authenticator key & QR code URI to display on the form
        var unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        if (string.IsNullOrEmpty(unformattedKey))
        {
            await UserManager.ResetAuthenticatorKeyAsync(user);
            unformattedKey = await UserManager.GetAuthenticatorKeyAsync(user);
        }

        sharedKey = FormatKey(unformattedKey!);

        var email = await UserManager.GetEmailAsync(user);
        authenticatorUri = GenerateQrCodeUri(email!, unformattedKey!);
    }

    private string FormatKey(string unformattedKey)
    {
        var result = new StringBuilder();
        int currentPosition = 0;
        while (currentPosition + 4 < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition, 4)).Append(' ');
            currentPosition += 4;
        }

        if (currentPosition < unformattedKey.Length)
        {
            result.Append(unformattedKey.AsSpan(currentPosition));
        }

        return result.ToString().ToLowerInvariant();
    }

    private string GenerateQrCodeUri(string email, string unformattedKey)
    {
        return string.Format(
            CultureInfo.InvariantCulture,
            AuthenticatorUriFormat,
            UrlEncoder.Encode("Microsoft.AspNetCore.Identity.UI"),
            UrlEncoder.Encode(email),
            unformattedKey);
    }

    private sealed class InputModel
    {
        [Required]
        [StringLength(7, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Text)]
        [Display(Name = "Verification Code")]
        public string Code { get; set; } = "";
    }

}