@page "/Account/Manage/DeletePersonalData"

@using System.ComponentModel.DataAnnotations
@using BudgetApplication.Components.Account
@using Microsoft.AspNetCore.Identity
@using BudgetApplication.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<DeletePersonalData> Logger

<PageTitle>Delete Personal Data</PageTitle>

<div class="text-white">
    <h1 class="font-semibold text-xl mb-4">Delete Personal Data</h1>
    
    <StatusMessage Message="@message"/>
    
    <div class="space-y-6">
        <div class="bg-red-500/10 border border-red-500/30 rounded-lg p-4">
            <div class="flex items-start">
                <svg class="w-6 h-6 text-red-400 mr-3 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd"/>
                </svg>
                <div>
                    <p class="text-sm font-medium text-red-400 mb-2">Danger Zone</p>
                    <p class="text-sm text-red-300">
                        <strong>Deleting this data will permanently remove your account, and this cannot be recovered.</strong>
                    </p>
                </div>
            </div>
        </div>

        <div class="bg-zinc-800 rounded-lg p-4 border border-zinc-600">
            <h2 class="text-lg font-medium mb-3">Confirm Account Deletion</h2>
            <p class="text-sm text-zinc-300 mb-4">
                Please enter your password to confirm you want to delete your account and all associated data.
            </p>
            
            <EditForm Model="Input" FormName="delete-user" OnValidSubmit="OnValidSubmitAsync" method="post">
                <DataAnnotationsValidator/>
                
                @if (requirePassword)
                {
                    <div class="mb-4">
                        <label class="block mb-2 text-sm font-medium text-white">Password</label>
                        <InputText @bind-Value="Input.Password" 
                                   type="password"
                                   placeholder="Enter your password"
                                   autocomplete="current-password"
                                   class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-red-500 focus:border-transparent text-white placeholder-zinc-400"/>
                        <ValidationMessage For="() => Input.Password" class="text-xs text-red-500 mt-2"/>
                    </div>
                }

                <div class="flex space-x-3">
                    <a href="Account/Manage/PersonalData" class="flex-1 px-4 py-2 bg-zinc-600 hover:bg-zinc-500 rounded-md text-white font-medium transition-colors text-center">
                        Cancel
                    </a>
                    <button type="submit" class="flex-1 px-4 py-2 bg-red-600 hover:bg-red-700 rounded-md text-white font-medium transition-colors">
                        Delete Account
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool requirePassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Input ??= new();
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        requirePassword = await UserManager.HasPasswordAsync(user);
    }

    private async Task OnValidSubmitAsync()
    {
        if (requirePassword && !await UserManager.CheckPasswordAsync(user, Input.Password))
        {
            message = "Error: Incorrect password.";
            return;
        }

        var result = await UserManager.DeleteAsync(user);
        if (!result.Succeeded)
        {
            throw new InvalidOperationException("Unexpected error occurred deleting user.");
        }

        await SignInManager.SignOutAsync();

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("User with ID '{UserId}' deleted themselves.", userId);

        RedirectManager.RedirectToCurrentPage();
    }

    private sealed class InputModel
    {
        [DataType(DataType.Password)] public string Password { get; set; } = "";
    }

}