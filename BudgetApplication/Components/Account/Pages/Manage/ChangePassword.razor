@page "/Account/Manage/ChangePassword"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Budget_Application.Data

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ILogger<ChangePassword> Logger

<PageTitle>Change password</PageTitle>

<div class="text-white">
    <h1 class="font-semibold text-xl mb-4">Change password</h1>
    
    <StatusMessage Message="@message"/>
    
    <div class="bg-zinc-800 rounded-lg p-4 border border-zinc-600">
        <EditForm Model="Input" FormName="change-password" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator/>
            <ValidationSummary class="text-xs text-red-500 mb-4" role="alert"/>
            
            <div class="mb-4">
                <label class="block mb-2 text-sm font-medium text-white">Old password</label>
                <InputText @bind-Value="Input.OldPassword" 
                           type="password"
                           placeholder="Enter your current password"
                           autocomplete="current-password"
                           class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                <ValidationMessage For="() => Input.OldPassword" class="text-xs text-red-500 mt-2"/>
            </div>

            <div class="mb-4">
                <label class="block mb-2 text-sm font-medium text-white">New password</label>
                <InputText @bind-Value="Input.NewPassword" 
                           type="password"
                           placeholder="Enter your new password"
                           autocomplete="new-password"
                           class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                <ValidationMessage For="() => Input.NewPassword" class="text-xs text-red-500 mt-2"/>
            </div>

            <div class="mb-4">
                <label class="block mb-2 text-sm font-medium text-white">Confirm new password</label>
                <InputText @bind-Value="Input.ConfirmPassword" 
                           type="password"
                           placeholder="Confirm your new password"
                           autocomplete="new-password"
                           class="w-full px-3 py-2 text-sm bg-zinc-700 border border-zinc-600 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-white placeholder-zinc-400"/>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-xs text-red-500 mt-2"/>
            </div>

            <button type="submit" class="w-full py-2 px-4 bg-blue-600 hover:bg-blue-700 rounded-md text-white font-medium transition-colors">
                Update password
            </button>
        </EditForm>
    </div>
</div>

@code {
    private string? message;
    private ApplicationUser user = default!;
    private bool hasPassword;

    [CascadingParameter] private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        hasPassword = await UserManager.HasPasswordAsync(user);
        if (!hasPassword)
        {
            RedirectManager.RedirectTo("Account/Manage/SetPassword");
        }
    }

    private async Task OnValidSubmitAsync()
    {
        var changePasswordResult = await UserManager.ChangePasswordAsync(user, Input.OldPassword, Input.NewPassword);
        if (!changePasswordResult.Succeeded)
        {
            message = $"Error: {string.Join(",", changePasswordResult.Errors.Select(error => error.Description))}";
            return;
        }

        await SignInManager.RefreshSignInAsync(user);
        Logger.LogInformation("User changed their password successfully.");

        RedirectManager.RedirectToCurrentPageWithStatus("Your password has been changed", HttpContext);
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }

}